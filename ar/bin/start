#!/usr/bin/env node

/**
 * Module dependencies.
 */
var app = require('../app');
var debug = require('debug')('ar:server');
var http = require('http');
var zkUtil=require("../util/ZkUtil");
var logger=require("../util/LogUtil").LOGGER;
var conf=require("../conf/arconf.json");

/**
 * Get port from environment and store in Express.
 */
var port = normalizePort(process.env.PORT||conf.port || '3000');
app.set('port', port);
zkUtil.init();//init zkUtil for set data to zkData

/**
 * Create HTTP server.
 */
var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);
server.on('clientError', onClose);

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }
  if (port >= 0) {
    // port number
    return port;
  }
  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }
  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;
  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      logger.error('%s requires elevated privileges',bind);
      process.exit(1);
      break;
    case 'EADDRINUSE':
      logger.error('%s is already in use',bind);
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
    logger.info('Listening on %s' , bind);
}

/**
 * Event listener for HTTP server "close" event.
 */
function onClose(){
  zkUtil.close();
  logger.log("close server success!");
}